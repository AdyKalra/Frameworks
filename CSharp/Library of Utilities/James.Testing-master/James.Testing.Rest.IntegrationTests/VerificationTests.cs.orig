using FluentAssertions;
using James.Testing.Rest.IntegrationTests.Models;
using NUnit.Framework;

namespace James.Testing.Rest.IntegrationTests
{
    [TestFixture]
    public class VerificationTests
    {
        [Test]
        public void
            given_object_and_output_parameter_and_expression_when_storing_should_take_value_from_expression_and_store_in_output_parameter()
        {
            var value = new Person {FirstName = "Todd", LastName = "Meinershagen"};
            string output;

            value.Store(out output, x => x.LastName);

            output.Should().Be(value.LastName);
        }
<<<<<<< HEAD
=======

        [Test]
        public void given_status_code_is_another_status_code_when_verifying_that_is_another_status_code_should_return_true()
        {
            var message = new HttpResponseMessage { StatusCode = HttpStatusCode.OK };
            IResponse<Guid, string> response = new Response<Guid, string>(message);

            response.VerifyThat(r => r.StatusCode).Is(HttpStatusCode.OK);
        }

        [Test]
        public void given_status_code_is_not_another_status_code_when_verifying_that_is_another_status_code_should_throw_exception()
        {
            var message = new HttpResponseMessage { StatusCode = HttpStatusCode.OK };
            IResponse<Guid, string> response = new Response<Guid, string>(message);

            Action action = () => response.VerifyThat(r => r.StatusCode).Is(HttpStatusCode.BadRequest);

            action.ShouldThrow<VerificationException>().WithMessage("Unable to verify that status code is BadRequest.  Found OK.");
        }
>>>>>>> 67b6380c6c1ca26d8e8794dae03a69131139787e
    }
}
